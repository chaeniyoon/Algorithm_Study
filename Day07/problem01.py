# 실전문제 9-4. 미래도시

"""
- 1번부터 N번까지의 회사 존재, 서로 도로를 통해 연결
- A는 현재 1번 회사에 위치 -> X번 회사에 방문에 물건 판매하고자 함

- 연결된 2개의 회사는 양방향으로 이동 가능
- 1만큼의 시간으로 이동 가능

- 소개팅 상대는 K번 회사에 존재 
- X번 회사에 가서 물건을 판매하기 전 먼저소개팅 상대의 회사 갈 것

--> 즉, 1번 회사 -> K번 회사 방문 -> X번 회사로 가는 것이 목표!
--> 가능한 빠르게 이동하고자 하기에, 이때 최소시간은 ?
"""

"""
문제)

1. 전형적인 플로이드 워셜 알고리즘 관련 예제 문제
-> 구현이 간단한 플로이드 워셜 알고리즘으로 푸는 것이 유리

2. 핵심 아이디어?
-> 1번 노드에서 K를 거쳐 X로 가는 최단 거리는
--> 1번 노드에서 K까지의 최단 거리 + K에서 X까지의 최단 거리!
"""

INF = int(1e9) # 무한을 의미하는 값으로 10억을 설정

# 노드의 개수 및 간선의 개수를 입력받기
n, m = map(int, input().split())
# 2차원 리스트(그래프 표현)을 만들고, 모든 값을 무한으로 초기화
"""
모든 지점에서 다른 모든 지점까지의 최단 정보를 담기 위해 
--> 2차원 리스트로 처리
"""
graph = [[INF] * (n+1) for _ in range(n+1)]

# 자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1, n+1):
	for b in range(1, n+1):
		if a == b:
			graph[a][b] = 0
            
# 각 간선에 대한 정보를 입력받아, 그 값으로 초기화
for _ in range(m):
	# A와 B가 서로에게 가는 비용은 1이라고 설정
	a, b = map(int, input().split())
	graph[a][b] = 1
	graph[b][a] = 1

# 거쳐 갈 노드 X와 최종 목적지 노드 K를 입력받기
x, k = map(int, input().split())

# 점화식에 따라 플로이드 워셜 알고리즘 수행
for k in range(1, n+1):
	for a in range(1, n+1):
		for b in range(1, n+1):
			graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])
            
# 수행된 결과를 출력
distance = graph[1][k] + graph[k][x]

# 도달할 수 없는 경우, -1을 출력
if distance >= INF:
	print("-1")
# 도달할 수 있다면, 최단 거리를 출력
else:
	print(distance)